generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  password  String
  name      String
  role      UserRole @default(ADMIN)
  avatar    String?  // Profile image URL
  phone     String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Activity logs
  activities ActivityLog[]
}

model TeamMember {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  position    String   // CEO, Director, Manager, Team Leader, etc.
  department  String?  // Finance, Operations, Programs, etc.
  email       String?
  phone       String?
  bio         String?
  avatar      String?  // Profile image URL
  startDate   DateTime @default(now())
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Child {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  age         Int
  class       String?
  bio         String?
  location    String
  needs       String[]
  photo       String?  // Profile image URL
  gallery     String[] // Additional photos
  isActive    Boolean  @default(true)
  isSponsored Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Sponsorship relationship
  sponsorships Sponsorship[]
}

model Beneficiary {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  contact     String?
  details     String?
  photos      String[] // Multiple photos
  helpType    String
  location    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Sponsor {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String   @unique
  phone       String?
  address     String?
  avatar      String?  // Profile image URL
  isActive    Boolean  @default(true)
  isBlacklisted Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  donations    Donation[]
  sponsorships Sponsorship[]
}

model Donation {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  amount      Float
  method      PaymentMethod
  status      DonationStatus @default(PENDING)
  date        DateTime      @default(now())
  description String?
  reference   String?
  
  // Relationships
  sponsor     Sponsor       @relation(fields: [sponsorId], references: [id])
  sponsorId   String        @db.ObjectId
  
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Sponsorship {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  startDate DateTime @default(now())
  endDate   DateTime?
  amount    Float
  isActive  Boolean  @default(true)
  
  // Relationships
  child     Child    @relation(fields: [childId], references: [id])
  childId   String   @db.ObjectId
  sponsor   Sponsor  @relation(fields: [sponsorId], references: [id])
  sponsorId String   @db.ObjectId
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ActivityLog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  action    String
  details   String?
  timestamp DateTime @default(now())
  
  // Relationships
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
}

model Settings {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  key         String @unique
  value       String
  description String?
  updatedAt   DateTime @updatedAt
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  EDITOR
  VIEWER
}

enum PaymentMethod {
  BANK_TRANSFER
  MOBILE_MONEY
  PAYPAL
  STRIPE
  CASH
}

enum DonationStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}
